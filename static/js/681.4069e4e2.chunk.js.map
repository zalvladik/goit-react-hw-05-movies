{"version":3,"file":"static/js/681.4069e4e2.chunk.js","mappings":"8LA2DA,UAvDgB,WACZ,OAA2BA,EAAAA,EAAAA,WAAS,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,UAAS,IAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEOC,GAAWC,EAAAA,EAAAA,MAAXD,QAiBP,OAZAE,EAAAA,EAAAA,YAAU,WAENL,GAAU,SAAAM,GAAS,OAAI,CAAJ,IACfC,YAAW,WACPC,MAAM,GAAD,OAPI,6BAOJ,oBAAwBL,EAAxB,4BANG,mCAMH,oBACRM,MAAK,SAAAC,GAAM,OAAIA,EAAOC,MAAX,IACXF,MAAK,SAAAG,GAAK,OAAKV,GAAW,SAAAI,GAAS,OAAIM,EAAMC,OAAV,GAAzB,IACVC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,QAAQlB,GAAU,SAAAM,GAAS,OAAI,CAAJ,IAC3B,GAAC,IACT,GAAC,CAACH,IAEAJ,GAEK,gBAAKoB,UAAU,iBAAf,UACI,cAAGA,UAAU,iBAAb,uCAKTlB,EAAQmB,OAAS,GAEZ,gBAAKD,UAAU,oBAAf,UACI,eAAIA,UAAU,eAAd,SACKlB,EAAQoB,KAAI,SAAAC,GAAM,OACf,gBAAmBH,UAAU,eAA7B,WACI,cAAGA,UAAU,iBAAb,SAA+BG,EAAOC,UACtC,cAAGJ,UAAU,kBAAb,SAAgCG,EAAOE,aAFlCC,EAAAA,EAAAA,MADM,QAWb,IAAnBxB,EAAQmB,QAEH,gBAAKD,UAAU,oBAAf,UACI,cAAGA,UAAU,iBAAb,kDAHZ,CASH,C,uDCxDM,IAkBIM,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Reviews.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useEffect,useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { nanoid } from \"nanoid\";\n\nconst Reviews = () =>{\n    const [loader,setLoader] = useState(true)\n    const [reviews, setReviews] = useState([])\n\n    const {movieID} = useParams()\n\n        const MAIN_URL = 'https://api.themoviedb.org';\n        const URL_KEY = 'fb40b3f9c120ec573db898c0235ca89c';\n\n    useEffect(() => {\n\n        setLoader(prevState => true)\n            setTimeout(() => {\n                fetch(`${MAIN_URL}/3/movie/${movieID}/reviews?api_key=${URL_KEY}&language=en-US`)\n            .then(result => result.json())\n            .then(array =>  setReviews(prevState => array.results))\n            .catch(error => console.log(error))\n            .finally(setLoader(prevState => false))\n            },2000)\n    },[movieID])\n\n    if(loader){\n        return(\n            <div className='cast_container'>\n                <p className='big_info_title'>Loading... ðŸ•“</p>\n            </div>\n        )\n    }\n\n    if(reviews.length > 0){\n        return(\n            <div className='reviews_container'>\n                <ul className='reviews_list'>\n                    {reviews.map(review =>\n                        <li key={nanoid()} className='reviews_item'>\n                            <p className='reviews_author'>{review.author}</p>\n                            <p className='reviews_content'>{review.content}</p>\n                        </li>\n                    )}\n                </ul>\n            </div>\n        )\n    }\n\n    if(reviews.length === 0){\n        return(\n            <div className='reviews_container'>   \n                <p className='big_info_title'>No reviews found ðŸ˜¥</p>\n            </div>\n        )\n    }\n\n    \n}\n\nexport default Reviews\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","loader","setLoader","reviews","setReviews","movieID","useParams","useEffect","prevState","setTimeout","fetch","then","result","json","array","results","catch","error","console","log","finally","className","length","map","review","author","content","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}