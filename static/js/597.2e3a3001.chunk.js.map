{"version":3,"file":"static/js/597.2e3a3001.chunk.js","mappings":"uMAyEA,UApEa,WACT,OAA2BA,EAAAA,EAAAA,WAAS,GAApC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEOC,GAAWC,EAAAA,EAAAA,MAAXD,QAqBP,OAhBAE,EAAAA,EAAAA,YAAU,WACHJ,EAAUK,OAAS,IAItBN,GAAU,SAAAO,GAAS,OAAI,CAAJ,IACfC,YAAW,WACPC,MAAM,GAAD,OAVI,6BAUJ,oBAAwBN,EAAxB,4BATG,mCASH,oBACRO,MAAK,SAAAC,GAAM,OAAIA,EAAOC,MAAX,IACXF,MAAK,SAAAG,GAAI,OAAIX,GAAa,SAAAK,GAAS,OAAIM,EAAKA,IAAT,GAA1B,IACTC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,QAAQlB,GAAU,SAAAO,GAAS,OAAI,CAAJ,KAC5BS,QAAQC,IAAI,YACX,GAAC,KACT,GAAC,CAAChB,EAAUK,OAAQH,IAElBJ,GAEK,gBAAKoB,UAAU,iBAAf,UACI,cAAGA,UAAU,iBAAb,uCAKTlB,EAAUK,OAAS,GAEd,gBAAKa,UAAU,iBAAf,UACI,eAAIA,UAAU,YAAd,SACKlB,EAAUmB,KAAI,SAAAP,GAAI,OACf,gBAAmBM,UAAU,YAA7B,WACI,gBAAKA,UAAU,uBAAf,SACCN,EAAKQ,cACF,gBAAKF,UAAU,aAAaG,IAAKT,EAAKU,KAAMC,IAAK,oDAAoDX,EAAKQ,gBAE1G,gBAAKF,UAAU,eAAeG,IAAKT,EAAKU,KAAMC,IAAKC,OAGvD,iBAAKN,UAAU,sBAAf,WACI,cAAGA,UAAU,YAAb,SAA0BN,EAAKU,QAC/B,eAAGJ,UAAU,YAAb,uBAAoCN,EAAKa,UAAzC,aAVCC,EAAAA,EAAAA,MADM,QAoBX,IAArB1B,EAAUK,QAEL,gBAAKa,UAAU,iBAAf,UACI,cAAGA,UAAU,iBAAb,gDAHZ,CASH,C,0ICtEM,IAkBIQ,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useEffect,useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { nanoid } from \"nanoid\";\nimport noImage from '../images/noImage.jpg'\n\nconst Cast = () =>{\n    const [loader,setLoader] = useState(true)\n    const [castArray, setCastArray] = useState([])\n\n    const {movieID} = useParams()\n\n        const MAIN_URL = 'https://api.themoviedb.org';\n        const URL_KEY = 'fb40b3f9c120ec573db898c0235ca89c';\n\n    useEffect(() => {\n        if(castArray.length > 0){\n            return\n        }\n\n        setLoader(prevState => true)\n            setTimeout(() =>{\n                fetch(`${MAIN_URL}/3/movie/${movieID}/credits?api_key=${URL_KEY}&language=en-US`)\n            .then(result => result.json())\n            .then(cast => setCastArray(prevState => cast.cast))\n            .catch(error => console.log(error))\n            .finally(setLoader(prevState => false))\n            console.log('castArray')\n            },2000)\n    },[castArray.length, movieID])\n\n    if(loader){\n        return(\n            <div className='cast_container'>\n                <p className='big_info_title'>Loading... ðŸ•“</p>\n            </div>\n        )\n    }\n\n    if(castArray.length > 0){\n        return(\n            <div className='cast_container'>\n                <ul className='cast_list'>\n                    {castArray.map(cast => \n                        <li key={nanoid()} className='cast_item'>\n                            <div className='cast_photo-container'>\n                            {cast.profile_path ? (\n                                <img className='cast_photo' alt={cast.name} src={'https://www.themoviedb.org/t/p/w138_and_h175_face'+cast.profile_path}></img>\n                            ) : (\n                                <img className='NOcast_photo' alt={cast.name} src={noImage}></img>)\n                                }\n                            </div>\n                            <div className='cast_text-container'>\n                                <p className='cast_name'>{cast.name}</p>\n                                <p className='cast_text'>Character:{cast.character} </p>\n                            </div>\n                        </li>\n                        )}\n                </ul>\n            </div>\n        )\n    }\n    \n    if(castArray.length === 0){\n        return(\n            <div className='cast_container'>\n                <p className='big_info_title'>No casts found ðŸ˜¥</p>\n            </div>\n        )\n    }\n\n    \n}\n\nexport default Cast","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","loader","setLoader","castArray","setCastArray","movieID","useParams","useEffect","length","prevState","setTimeout","fetch","then","result","json","cast","catch","error","console","log","finally","className","map","profile_path","alt","name","src","noImage","character","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}